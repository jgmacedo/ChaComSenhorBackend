================================================
FILE: readme.md
================================================
# ChaComOSenhor

## Overview
ChaComOSenhor is a Java-based application built with the Spring Boot framework. It includes scheduling capabilities and provides a REST API for managing users, Bible verses, devotionals, and testing AI services. The project uses Maven for dependency management and SQL for database operations.

## Features
- User management (CRUD operations)
- Bible verse management
- Devotional creation
- AI service testing
- Scheduling support

## Technologies Used
- **Java**: Core programming language
- **Spring Boot**: Framework for building the application
- **Maven**: Dependency and build management
- **SQL**: Database operations
- **IntelliJ IDEA**: Recommended IDE for development

## Prerequisites
- Java 17 or higher
- Maven 3.8 or higher
- A running SQL database (e.g., MySQL, PostgreSQL)
- IntelliJ IDEA (optional but recommended)

## Getting Started

### Clone the Repository
```bash
git clone https://github.com/jgmacedo/ChaComOSenhor.git
cd ChaComOSenhor
```

### Configure the Application
1. Create an `application.properties` or `application.yml` file in the `src/main/resources` directory.
2. Add your database configuration:
   ```properties
   spring.datasource.url=jdbc:mysql://localhost:3306/your_database
   spring.datasource.username=your_username
   spring.datasource.password=your_password
   spring.jpa.hibernate.ddl-auto=update
   ```

### Build and Run the Application
1. Build the project:
   ```bash
   mvn clean install
   ```
2. Run the application:
   ```bash
   mvn spring-boot:run
   ```

### API Endpoints
Below are some of the key API endpoints:

#### User Management
- **Get All Users**: `GET /admin/users`
- **Delete User by ID**: `DELETE /admin/users/{id}`

#### Bible Verse Management
- **Get Bible Verse by ID**: `GET /admin/get_bible_verse_by_id/{id}`
- **Get All Bible Verses**: `GET /admin/get_all_bible_verses`
- **Create Bible Verse**: `POST /admin/create_bible_verse`

#### Devotional Management
- **Create Devotional**: `POST /admin/create_devotional/{id}`

#### AI Service
- **Test AI Service**: `GET /admin/test_ai_service/{id}`

### Example HTTP Requests
You can use tools like Postman or HTTP client files (e.g., `.http` files) to test the API. Example requests are provided in the `HTTP Test/test1.http` file.

## Development

### IDE Setup
1. Open the project in IntelliJ IDEA.
2. Ensure the Maven tool window is enabled.
3. Run the `ChaComOSenhorApplication` class to start the application.

### Running Tests
To execute tests, run:
```bash
mvn test
```

## Contributing
1. Fork the repository.
2. Create a new branch for your feature or bug fix.
3. Commit your changes and push the branch.
4. Open a pull request.

## License
This project is licensed under the MIT License. See the `LICENSE` file for details.

## Contact
For questions or support, contact the project maintainer at `jgmacedo`.


================================================
FILE: mvnw
================================================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
[ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
native_path() { cygpath --path --windows "$1"; }
;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
# For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
if [ -n "${JAVA_HOME-}" ]; then
if [ -x "$JAVA_HOME/jre/sh/java" ]; then
# IBM's JDK on AIX uses strange locations for the executables
JAVACMD="$JAVA_HOME/jre/sh/java"
JAVACCMD="$JAVA_HOME/jre/sh/javac"
else
JAVACMD="$JAVA_HOME/bin/java"
JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
else
JAVACMD="$(
'set' +e
'unset' -f command 2>/dev/null
'command' -v java
)" || :
JAVACCMD="$(
'set' +e
'unset' -f command 2>/dev/null
'command' -v javac
)" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
fi
}

# hash string like Java String::hashCode
hash_string() {
str="${1:-}" h=0
while [ -n "$str" ]; do
char="${str%"${str#?}"}"
h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
str="${str#?}"
done
printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
printf %s\\n "$1" >&2
exit 1
}

trim() {
# MWRAPPER-139:
#   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
#   Needed for removing poorly interpreted newline sequences when running in more
#   exotic environments such as mingw bash on Windows.
printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
case "${key-}" in
distributionUrl) distributionUrl=$(trim "${value-}") ;;
distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
*AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
:Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
:Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
:Linux*x86_64*) distributionPlatform=linux-amd64 ;;
*)
echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
distributionPlatform=linux-amd64
;;
esac
distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
verbose "found existing MAVEN_HOME at $MAVEN_HOME"
exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
trap clean HUP INT TERM EXIT
else
die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
distributionUrl="${distributionUrl%.zip}.tar.gz"
distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
verbose "Found wget ... using wget"
wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
verbose "Found curl ... using curl"
curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
verbose "Falling back to use Java to download"
javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
cat >"$javaSource" <<-END
public class Downloader extends java.net.Authenticator
{
protected java.net.PasswordAuthentication getPasswordAuthentication()
{
return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
}
public static void main( String[] args ) throws Exception
{
setDefault( new Downloader() );
java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
}
}
END
# For Cygwin/MinGW, switch paths to Windows format before running javac and java
verbose " - Compiling Downloader.java ..."
"$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
verbose " - Running Downloader.java ..."
"$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
distributionSha256Result=false
if [ "$MVN_CMD" = mvnd.sh ]; then
echo "Checksum validation is not supported for maven-mvnd." >&2
echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
exit 1
elif command -v sha256sum >/dev/null; then
if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
distributionSha256Result=true
fi
elif command -v shasum >/dev/null; then
if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
distributionSha256Result=true
fi
else
echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
exit 1
fi
if [ $distributionSha256Result = false ]; then
echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
exit 1
fi
fi

# unzip and move
if command -v unzip >/dev/null; then
unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"



================================================
FILE: mvnw.cmd
================================================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
$VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
"maven-mvnd-*" {
$USE_MVND = $true
$distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
$MVN_CMD = "mvnd.cmd"
break
}
default {
$USE_MVND = $false
$MVN_CMD = $script -replace '^mvnw','mvn'
break
}
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
$MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
$distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
$MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
if ($TMP_DOWNLOAD_DIR.Exists) {
try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
$webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
if ($USE_MVND) {
Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
}
Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
}
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
Write-Error "fail to move MAVEN_HOME"
}
} finally {
try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"



================================================
FILE: pom.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<parent>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version>3.4.4</version>
<relativePath/> <!-- lookup parent from repository -->
</parent>
<groupId>joao</groupId>
<artifactId>ChaComOSenhor</artifactId>
<version>0.0.1-SNAPSHOT</version>
<name>ChaComOSenhor</name>
<description>Demo project for Spring Boot</description>
<url/>
<licenses>
<license/>
</licenses>
<developers>
<developer/>
</developers>
<scm>
<connection/>
<developerConnection/>
<tag/>
<url/>
</scm>
<properties>
<java.version>17</java.version>
<spring-ai.version>1.0.0-M6</spring-ai.version>
</properties>
<dependencies>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>
</dependency>
<dependency>
<groupId>org.flywaydb</groupId>
<artifactId>flyway-core</artifactId>
</dependency>
<dependency>
<groupId>org.flywaydb</groupId>
<artifactId>flyway-database-postgresql</artifactId>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-devtools</artifactId>
<scope>runtime</scope>
<optional>true</optional>
</dependency>
<dependency>
<groupId>org.postgresql</groupId>
<artifactId>postgresql</artifactId>
<scope>runtime</scope>
</dependency>
<dependency>
<groupId>org.projectlombok</groupId>
<artifactId>lombok</artifactId>
<version>1.18.38</version>
<scope>provided</scope>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-test</artifactId>
<scope>test</scope>
</dependency>
<dependency>
<groupId>org.springframework.security</groupId>
<artifactId>spring-security-test</artifactId>
<scope>test</scope>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
<groupId>com.auth0</groupId>
<artifactId>java-jwt</artifactId>
<version>4.5.0</version>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-validation</artifactId>
<version>3.4.4</version>
</dependency>
<dependency>
<groupId>org.junit.jupiter</groupId>
<artifactId>junit-jupiter</artifactId>
<version>5.8.2</version>
<scope>test</scope>
</dependency>
<dependency>
<groupId>com.github.tomakehurst</groupId>
<artifactId>wiremock-jre8</artifactId>
<version>2.35.0</version>
<scope>test</scope>
</dependency>
<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-test</artifactId>
<version>5.3.20</version>
<scope>test</scope>
</dependency>
<dependency>
<groupId>javax.servlet</groupId>
<artifactId>javax.servlet-api</artifactId>
<version>4.0.1</version>
<scope>test</scope>
</dependency>
</dependencies>
<dependencyManagement>
<dependencies>
</dependencies>
</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>1.18.38</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>



================================================
FILE: src/main/java/joao/ChaComOSenhor/ChaComOSenhorApplication.java
================================================
package joao.ChaComOSenhor;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class ChaComOSenhorApplication {

	public static void main(String[] args) {
		SpringApplication.run(ChaComOSenhorApplication.class, args);
	}

}



================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/bible_verse/BibleVerse.java
================================================
package joao.ChaComOSenhor.domain.bible_verse;

    import jakarta.persistence.*;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @Table(name = "bible_verses")
    @AllArgsConstructor
    @NoArgsConstructor
    @Entity
    public class BibleVerse {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @Column(length = 1000)
        private String text;

        @Column(length = 100)
        private String reference;

        // This constructor can be used for testing
        public BibleVerse(String reference, String text) {
            this.reference = reference;
            this.text = text;
        }
    }


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/bible_verse/BibleVerseCreationDTO.java
================================================
package joao.ChaComOSenhor.domain.bible_verse;

public record BibleVerseCreationDTO(
String reference,
String text
) {
public BibleVerse toBibleVerse() {
BibleVerse bibleVerse = new BibleVerse();
bibleVerse.setReference(reference);
bibleVerse.setText(text);
return bibleVerse;
}
}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/bible_verse/BibleVerseRequestDTO.java
================================================
package joao.ChaComOSenhor.domain.bible_verse;

import java.time.LocalDate;

public record BibleVerseRequestDTO(LocalDate date) { }



================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/bible_verse/BibleVerseResponseDTO.java
================================================
package joao.ChaComOSenhor.domain.bible_verse;

public record BibleVerseResponseDTO(
Long id,
String text,
String reference,
String book,
Integer chapter,
Integer verse
) {
public ExactQuoteDTO toExactQuoteDTO() {
return new ExactQuoteDTO(text, reference);
}
}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/bible_verse/ExactQuoteDTO.java
================================================
package joao.ChaComOSenhor.domain.bible_verse;

public record ExactQuoteDTO(
String text,
String reference
) {}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/devotional/Devotional.java
================================================
package joao.ChaComOSenhor.domain.devotional;

import jakarta.persistence.*;
import joao.ChaComOSenhor.domain.bible_verse.BibleVerse;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;

@Data
@Table(name = "devotionals")
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Devotional {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @Column(length = 3000)
    private String reflection;

    @Column(length = 500)
    private String prayer;

    @Column(length = 1000)
    private String practicalApplication;

    @Column(length = 1000)
    private String supportingVerses;

    private LocalDate date;

    @ManyToOne
    @JoinColumn(name = "bible_verses_id")
    private BibleVerse bibleVerse;
}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/devotional/DevotionalListDTO.java
================================================
package joao.ChaComOSenhor.domain.devotional;

import java.time.LocalDate;

public record DevotionalListDTO(Long id,
String title,
LocalDate date) {
}



================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/devotional/DevotionalResponseDTO.java
================================================
package joao.ChaComOSenhor.domain.devotional;

import joao.ChaComOSenhor.domain.bible_verse.ExactQuoteDTO;

import java.time.LocalDate;

public record DevotionalResponseDTO(
Long id,
ExactQuoteDTO exactQuote,
String title,
String reflection,
String prayer,
PracticalApplicationDTO practicalApplication,
ValidationDTO validation,
LocalDate date
) {}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/devotional/PracticalApplicationDTO.java
================================================
package joao.ChaComOSenhor.domain.devotional;

public record PracticalApplicationDTO(
String content,
String step
) {}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/devotional/template.json
================================================
[{
"exactQuote": "Bible verse in ESV/NIV, formatted with verse numbers if applicable",
"title": "Concise, thematic title reflecting the verse's core message",
"reflection": "150-word reflection connecting the verse to Christian life, referencing trusted authors and Scripture (ESV/NIV). Focus on historic Christian theology, avoiding denominational bias.",
"prayer": "Short prayer rooted in the verse’s themes, addressing God with reverence and practical faith application.",
"practicalApplication": "Actionable step for individuals or groups, tied to the verse’s teaching and aligned with Scriptural principles.",
"supportingVerses": "Relevant supporting Bible verses (ESV/NIV)"
},
{
"id": "gen-1743779054-Y9hl9YVfLNz4HrdgYSlQ",
"provider": "Chutes",
"model": "deepseek/deepseek-v3-base",
"object": "chat.completion",
"created": 1743779054,
"choices": [
{
"logprobs": null,
"index": 0,
"message": {
"role": "assistant",
"content": "",
"refusal": null
}
}
],
"usage": {
"prompt_tokens": 202,
"completion_tokens": 0,
"total_tokens": 202
}
}]


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/devotional/ValidationDTO.java
================================================
package joao.ChaComOSenhor.domain.devotional;

import java.util.List;

public record ValidationDTO(
List<String> sources,
String ethicalAlignment
) {}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/user/AuthenticationDTO.java
================================================
package joao.ChaComOSenhor.domain.user;

import jakarta.validation.constraints.NotBlank;

public record AuthenticationDTO(
@NotBlank(message = "Login is required")
String login,

        @NotBlank(message = "Password is required")
        String password
) {}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/user/LoginResponseDTO.java
================================================
package joao.ChaComOSenhor.domain.user;

public record LoginResponseDTO(
String token
) {
}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/user/RegisterDTO.java
================================================
package joao.ChaComOSenhor.domain.user;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public record RegisterDTO(
@NotBlank(message = "Login is required")
String login,

    @NotBlank(message = "Password is required")
    @Size(min = 6, message = "Password must be at least 6 characters")
    String password,

    @NotBlank(message = "Name is required")
    String name,

    @NotBlank(message = "Email is required")
    @Email(message = "Invalid email format")
    String email
) {
}


================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/user/User.java
================================================
package joao.ChaComOSenhor.domain.user;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String login;
    private String name;
    private String email;
    private String password;
    private UserRole role;
    private String token;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.getRole()));
    }

    @Override
    public String getUsername() {
        return login;
    }

    @Override
    public boolean isAccountNonExpired() {
        return UserDetails.super.isAccountNonExpired();
    }

    @Override
    public boolean isAccountNonLocked() {
        return UserDetails.super.isAccountNonLocked();
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return UserDetails.super.isCredentialsNonExpired();
    }

    @Override
    public boolean isEnabled() {
        return UserDetails.super.isEnabled();
    }
}



================================================
FILE: src/main/java/joao/ChaComOSenhor/domain/user/UserRole.java
================================================
package joao.ChaComOSenhor.domain.user;

import lombok.Getter;

@Getter
public enum UserRole {
ADMIN("admin"),
USER("user");

    private final String role;

    UserRole(String role) {
        this.role = role;
    }
}



================================================
FILE: src/main/java/joao/ChaComOSenhor/infra/security/SecurityConfig.java
================================================
package joao.ChaComOSenhor.infra.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
* Configuration class for Spring Security.
* Defines security settings and beans for the application.
  */
  @Configuration
  @EnableWebSecurity
  public class SecurityConfig {

  @Autowired
  SecurityFilter securityFilter;

  /**
    * Configures the security filter chain.
    *
    * @param httpSecurity the HttpSecurity to modify
    * @return the configured SecurityFilterChain
    * @throws Exception if an error occurs while configuring the security filter chain
      */
      @Bean
      public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
      return httpSecurity
      .csrf(AbstractHttpConfigurer::disable)
      .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
      .authorizeHttpRequests(authorize -> authorize
      .requestMatchers(HttpMethod.POST, "auth/login").permitAll()
      .requestMatchers(HttpMethod.POST, "auth/register").permitAll()
      .anyRequest().authenticated()
      )
      .addFilterBefore(securityFilter, UsernamePasswordAuthenticationFilter.class)
      .build();
      }

  /**
    * Provides the AuthenticationManager bean.
    *
    * @param configuration the AuthenticationConfiguration to use
    * @return the AuthenticationManager
    * @throws Exception if an error occurs while creating the AuthenticationManager
      */
      @Bean
      public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
      return configuration.getAuthenticationManager();
      }

  /**
    * Provides the PasswordEncoder bean.
    *
    * @return the PasswordEncoder
      */
      @Bean
      public PasswordEncoder passwordEncoder() {
      return new BCryptPasswordEncoder();
      }
      }


================================================
FILE: src/main/java/joao/ChaComOSenhor/infra/security/SecurityFilter.java
================================================
package joao.ChaComOSenhor.infra.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.NonNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import joao.ChaComOSenhor.repositories.UserRepository;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

/**
* Security filter that processes each request once to validate the JWT token and set the authentication context.
  */
  @Component
  public class SecurityFilter extends OncePerRequestFilter {

  @Autowired
  TokenService tokenService;

  @Autowired
  UserRepository userRepository;

  /**
    * Filters incoming requests to validate the JWT token and set the authentication context.
    *
    * @param request the HTTP request
    * @param response the HTTP response
    * @param filterChain the filter chain
    * @throws ServletException if a servlet error occurs
    * @throws IOException if an I/O error occurs
      */
      @Override
      protected void doFilterInternal(@NonNull HttpServletRequest request,
      @NonNull HttpServletResponse response,
      @NonNull FilterChain filterChain) throws ServletException, IOException {
      var token = this.recoverToken(request);
      if (token != null) {
      var login = tokenService.validateToken(token);
      UserDetails user = userRepository.findByLogin(login);

           var authentication = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
           SecurityContextHolder.getContext().setAuthentication(authentication);
      }
      filterChain.doFilter(request, response);
      }

  /**
    * Recovers the JWT token from the Authorization header of the request.
    *
    * @param request the HTTP request
    * @return the JWT token, or null if the Authorization header is not present
      */
      private String recoverToken(HttpServletRequest request) {
      var authHeader = request.getHeader("Authorization");
      if (authHeader == null) return null;
      return authHeader.replace("Bearer ", "");
      }
      }


================================================
FILE: src/main/java/joao/ChaComOSenhor/infra/security/TokenService.java
================================================
package joao.ChaComOSenhor.infra.security;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import joao.ChaComOSenhor.domain.user.User;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

/**
* Service class for handling JWT token generation and validation.
  */
  @Service
  public class TokenService {

  @Value("${api.security.token.secret}")
  private String secret;

  /**
    * Generates a JWT token for the given user.
    *
    * @param user the user for whom the token is generated
    * @return the generated JWT token
    * @throws RuntimeException if an error occurs while generating the token
      */
      public String generateToken(User user) {
      try {
      Algorithm algorithm = Algorithm.HMAC256(secret);
      return JWT.create()
      .withIssuer("ChaComOSenhor")
      .withSubject(user.getLogin())
      .withExpiresAt(genExpirationDate())
      .sign(algorithm);
      } catch (JWTCreationException e) {
      throw new RuntimeException("Error while generating token", e);
      }
      }

  /**
    * Validates the given JWT token and returns the subject (user login).
    *
    * @param token the JWT token to validate
    * @return the subject (user login) if the token is valid, or an empty string if invalid
      */
      public String validateToken(String token) {
      try {
      Algorithm algorithm = Algorithm.HMAC256(secret);
      return JWT.require(algorithm)
      .withIssuer("ChaComOSenhor")
      .build()
      .verify(token)
      .getSubject();
      } catch (JWTVerificationException e) {
      return "";
      }
      }

  /**
    * Generates the expiration date for the JWT token.
    *
    * @return the expiration date as an Instant
      */
      private Instant genExpirationDate() {
      return LocalDateTime.now().plusHours(1).toInstant(ZoneOffset.of("-03:00"));
      }
      }


================================================
FILE: src/main/java/joao/ChaComOSenhor/repositories/BibleVerseRepository.java
================================================
package joao.ChaComOSenhor.repositories;

import joao.ChaComOSenhor.domain.bible_verse.BibleVerse;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface BibleVerseRepository extends JpaRepository<BibleVerse, Long> { }



================================================
FILE: src/main/java/joao/ChaComOSenhor/repositories/DevotionalRepository.java
================================================
package joao.ChaComOSenhor.repositories;

import joao.ChaComOSenhor.domain.devotional.Devotional;
import org.springframework.data.jpa.repository.JpaRepository;

import java.time.LocalDate;
import java.util.Optional;

/**
* Repository interface for Devotional entities.
* Extends JpaRepository to provide CRUD operations.
  */
  public interface DevotionalRepository extends JpaRepository<Devotional, Long> {

  /**
    * Finds a Devotional by its date.
    *
    * @param date the date of the devotional
    * @return an Optional containing the found Devotional, or empty if not found
      */
      Optional<Devotional> findByDate(LocalDate date);
      }


================================================
FILE: src/main/java/joao/ChaComOSenhor/repositories/UserRepository.java
================================================
package joao.ChaComOSenhor.repositories;

    import joao.ChaComOSenhor.domain.user.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.security.core.userdetails.UserDetails;

    /**
     * Repository interface for User entities.
     * Extends JpaRepository to provide CRUD operations.
     */
    public interface UserRepository extends JpaRepository<User, Long> {

        /**
         * Finds a User by their login.
         *
         * @param login the login of the user
         * @return the UserDetails of the user with the given login
         */
        UserDetails findByLogin(String login);

        /**
         * Finds a User by their email.
         *
         * @param email the email of the user
         * @return the User with the given email
         */
        User findByEmail(String email);
    }


================================================
FILE: src/main/java/joao/ChaComOSenhor/services/AiService.java
================================================
package joao.ChaComOSenhor.services;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest;

import com.fasterxml.jackson.databind.ObjectMapper;
import joao.ChaComOSenhor.domain.bible_verse.BibleVerse;
import joao.ChaComOSenhor.domain.devotional.Devotional;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class AiService {

    @Value("${openrouter.api.key}")
    private String openRouterApiKey;

    @Value("${openrouter.api.url}")
    private String openRouterUrl;

    private final ObjectMapper objectMapper = new ObjectMapper();

    private String generateFullPrompt(BibleVerse bibleVerse){
        return String.format(
                """
                        ANSWER ONLY THE JSON, NOTHING ELSE. Do not include formatting or explanations. You are a theologian and devotional writer. Given %s and %s, generate: An exact quote of the verse (ESV translation). A title reflecting the verse's theme. A 150-word reflection connecting the verse to daily Christian life. A short prayer based on the verse. A practical application step. Prioritize these 3 concepts: Source Quality: Prioritize well-regarded Christian authors and Scripture (ESV or NIV) to ensure doctrinal soundness 10. Validation: Add a review step (automated) to cross-check outputs against trusted theological resources 10. Ethical Alignment: Avoid controversial interpretations by restricting training data to widely accepted texts Avoid denominational bias and ensure doctrinal alignment with historic Christianity. Structure it exactly like this json template:
                        {
                          "exactQuote":
                          "title":
                          "reflection":
                          "prayer":
                          "practicalApplication":
                          "supportingVerses":
                        }
                        """,
                bibleVerse.getReference(), bibleVerse.getText()
        );
    }

    public String sendPostToOpenRouter(BibleVerse bibleVerse) {
    try {
        var client = HttpClient.newHttpClient();
        var request = HttpRequest.newBuilder()
                .uri(URI.create(openRouterUrl))
                .header("Authorization", "Bearer " + this.openRouterApiKey)
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(generateFullPrompt(bibleVerse)))
                .build();

        var response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
        } catch (Exception e) {
            throw new RuntimeException("Erro ao solicitar a devocional: " + e.getMessage(), e);
        }
    }

    public Devotional parseJsonToDevotional(String jsonResponse) {
        try {
            return objectMapper.readValue(jsonResponse, Devotional.class);
        } catch (Exception e) {
            throw new RuntimeException("Erro ao parsear o JSON: " + e.getMessage(), e);
        }
    }
}


================================================
FILE: src/main/java/joao/ChaComOSenhor/services/AuthenticationService.java
================================================
package joao.ChaComOSenhor.services;

import joao.ChaComOSenhor.domain.user.RegisterDTO;
import joao.ChaComOSenhor.domain.user.User;
import joao.ChaComOSenhor.domain.user.UserRole;
import joao.ChaComOSenhor.infra.security.TokenService;
import joao.ChaComOSenhor.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

/**
* Service class for handling authentication-related operations such as login and registration.
  */
  @Service
  public class AuthenticationService {

  @Autowired
  private UserRepository userRepository;

  @Autowired
  private TokenService tokenService;

  @Autowired
  private AuthenticationManager authenticationManager;

  @Autowired
  private PasswordEncoder passwordEncoder;

  /**
    * Authenticates a user and generates a JWT token.
    *
    * @param login the user's login
    * @param password the user's password
    * @return a JWT token if authentication is successful
      */
      public String login(String login, String password) {
      var usernamePassword = new UsernamePasswordAuthenticationToken(login, password);
      Authentication auth = authenticationManager.authenticate(usernamePassword);
      User user = (User) auth.getPrincipal();
      return tokenService.generateToken(user);
      }

  /**
    * Registers a new user.
    *
    * @param registerDTO the data transfer object containing user registration details
    * @return the newly registered user
    * @throws RuntimeException if the username or email already exists
      */
      public User register(RegisterDTO registerDTO) {
      if(userRepository.findByLogin(registerDTO.login()) != null) {
      throw new RuntimeException("Usuário já existe");
      }
      if(userRepository.findByEmail(registerDTO.email()) != null){
      throw new RuntimeException("Email já cadastrado");
      }

      String encryptedPassword = passwordEncoder.encode(registerDTO.password());
      User newUser = new User();
      newUser.setLogin(registerDTO.login());
      newUser.setPassword(encryptedPassword);
      newUser.setName(registerDTO.name());
      newUser.setEmail(registerDTO.email());
      newUser.setRole(UserRole.valueOf("USER"));

      return userRepository.save(newUser);
      }
      }


================================================
FILE: src/main/java/joao/ChaComOSenhor/services/BibleVerseService.java
================================================
package joao.ChaComOSenhor.services;

import joao.ChaComOSenhor.domain.bible_verse.BibleVerse;
import joao.ChaComOSenhor.domain.bible_verse.BibleVerseCreationDTO;
import joao.ChaComOSenhor.repositories.BibleVerseRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


@Service
public class BibleVerseService {

    @Autowired
    private BibleVerseRepository bibleVerseRepository;

    /**
     * Save a new Bible verse
     */
    public BibleVerse createBibleVerse(BibleVerseCreationDTO dto) {
       BibleVerse bibleVerse = dto.toBibleVerse();
       return saveBibleVerse(bibleVerse);
    }

    public BibleVerse saveBibleVerse(BibleVerse bibleVerse) {
        return bibleVerseRepository.save(bibleVerse);
    }
}


================================================
FILE: src/main/java/joao/ChaComOSenhor/services/DevotionalService.java
================================================
package joao.ChaComOSenhor.services;

import joao.ChaComOSenhor.domain.bible_verse.BibleVerse;
import joao.ChaComOSenhor.domain.devotional.Devotional;
import joao.ChaComOSenhor.repositories.DevotionalRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.logging.Logger;

@Service
public class DevotionalService {
private static final Logger logger = Logger.getLogger(DevotionalService.class.getName());

    @Autowired
    private DevotionalRepository devotionalRepository;

    @Autowired
    private AiService aiService;

    public Devotional createDailyDevotional(BibleVerse bibleVerse) {
        try {
            checkIfDevotionalExistsForToday();

            Devotional content = generateDevotionalContent(bibleVerse);

            Devotional devotional = buildDevotional(content, bibleVerse);

            devotionalRepository.save(devotional);
            logger.info("Devocional diária criada com sucesso para " + LocalDate.now());

            return devotional;
        } catch (Exception e) {
            logger.severe("Erro ao criar devocional diária: " + e.getMessage());
            throw new RuntimeException("Failed to create daily devotional: " + e.getMessage(), e);
        }
    }

    private void checkIfDevotionalExistsForToday() {
        if (devotionalRepository.findByDate(LocalDate.now()).isPresent()) {
            throw new RuntimeException("A devotional for today already exists");
        }
    }

    private Devotional generateDevotionalContent(BibleVerse bibleVerse) {
        String jsonResponse = aiService.sendPostToOpenRouter(bibleVerse);
        return aiService.parseJsonToDevotional(jsonResponse);
    }

    private Devotional buildDevotional(Devotional content, BibleVerse bibleVerse) {
        Devotional devotional = new Devotional();
        devotional.setTitle(content.getTitle());
        devotional.setReflection(content.getReflection());
        devotional.setPrayer(content.getPrayer());
        devotional.setPracticalApplication(content.getPracticalApplication());
        devotional.setSupportingVerses(content.getSupportingVerses());
        devotional.setDate(LocalDate.now());
        devotional.setBibleVerse(bibleVerse);
        return devotional;
    }

    public Devotional getTodaysDevotional() {
        LocalDate today = LocalDate.now();
        return devotionalRepository.findByDate(today)
                .orElseThrow(() -> new RuntimeException("Não encontramos a devocional de hoje."));
    }

    public Devotional getDevotionalByDate(LocalDate date) {
        return devotionalRepository.findByDate(date)
                .orElseThrow(() -> new RuntimeException("Não encontramos a devocional do dia " + date.toString()));
    }
}


================================================
FILE: src/main/resources/db/migration/V1__.sql
================================================
CREATE TABLE "user"
(
id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
login    VARCHAR(255),
name     VARCHAR(255),
email    VARCHAR(255),
password VARCHAR(255),
role     VARCHAR(255),
token    VARCHAR(255),
CONSTRAINT pk_user PRIMARY KEY (id)
);


================================================
FILE: src/main/resources/db/migration/V2__.sql
================================================
CREATE TABLE bible_verses
(
id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
book      VARCHAR(255),
chapter   INTEGER,
verse     INTEGER,
text      VARCHAR(1000),
reference VARCHAR(100),
CONSTRAINT pk_bible_verses PRIMARY KEY (id)
);


================================================
FILE: src/main/resources/db/migration/V3__.sql
================================================
CREATE TABLE devotionals
(
id              BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
title           VARCHAR(255),
content         VARCHAR(3000),
date            date,
bible_verses_id BIGINT,
CONSTRAINT pk_devotionals PRIMARY KEY (id)
);

ALTER TABLE devotionals
ADD CONSTRAINT FK_DEVOTIONALS_ON_BIBLE_VERSES FOREIGN KEY (bible_verses_id) REFERENCES bible_verses (id);


================================================
FILE: src/main/resources/db/migration/V4__.sql
================================================
ALTER TABLE devotionals
ADD ethical_alignment VARCHAR(500);

ALTER TABLE devotionals
ADD practical_application VARCHAR(1000);

ALTER TABLE devotionals
ADD prayer VARCHAR(500);

ALTER TABLE devotionals
ADD reflection VARCHAR(3000);

ALTER TABLE devotionals
ADD validation_sources VARCHAR(1000);

ALTER TABLE devotionals
DROP COLUMN content;


================================================
FILE: src/main/resources/db/migration/V5__.sql
================================================
ALTER TABLE bible_verses
DROP COLUMN book;

ALTER TABLE bible_verses
DROP COLUMN chapter;

ALTER TABLE bible_verses
DROP COLUMN verse;


================================================
FILE: src/test/java/joao/ChaComOSenhor/ChaComOSenhorApplicationTests.java
================================================
package joao.ChaComOSenhor;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ChaComOSenhorApplicationTests {

	@Test
	void contextLoads() {
	}

}



================================================
FILE: .mvn/wrapper/maven-wrapper.properties
================================================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip


